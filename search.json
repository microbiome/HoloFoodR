[{"path":"/articles/HoloFoodR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"HoloFoodR: interface to HoloFoodR database","text":"HoloFoodR package designed ease access EBI’s HoloFoodR resource, allowing searching retrieval multiple datasets downstream analysis. HoloFood database encompass metagenomics data; however, data stored within MGnify database. packages offer analogous functionalities, streamlining integration data enhancing accessibility. TreeSummarizedExperiment","code":""},{"path":"/articles/HoloFoodR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"HoloFoodR: interface to HoloFoodR database","text":"HoloFoodR hosted Bioconductor, can installed using via BiocManager.","code":"BiocManager::install(\"HoloFoodR\")"},{"path":"/articles/HoloFoodR.html","id":"load-the-package","dir":"Articles","previous_headings":"","what":"Load the package","title":"HoloFoodR: interface to HoloFoodR database","text":"installed, HoloFoodR made available usual way.","code":"library(HoloFoodR) #> Loading required package: MultiAssayExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: 'generics' #> The following objects are masked from 'package:base': #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, is.unsorted, lapply, Map, mapply, match, mget, #>     order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, #>     rbind, Reduce, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians #> Loading required package: TreeSummarizedExperiment #> Loading required package: SingleCellExperiment #> Loading required package: Biostrings #> Loading required package: XVector #>  #> Attaching package: 'Biostrings' #> The following object is masked from 'package:base': #>  #>     strsplit"},{"path":"/articles/HoloFoodR.html","id":"functionalities","dir":"Articles","previous_headings":"","what":"Functionalities","title":"HoloFoodR: interface to HoloFoodR database","text":"HoloFoodR offers three functions doQuery(), getResult() getData() can utilized search fetch data HoloFood database. tutorial, demonstrate search animals, subset animals based whether specific sample type, finally fetch data samples. Note can done doQuery() getResult() (getData() getResult()) utilizing query filters. tutorial demonstrating functionality package. Additionally, package includes getMetaboLights() function can utilized retrieve metabolomic data MetaboLights database.","code":""},{"path":"/articles/HoloFoodR.html","id":"search-data","dir":"Articles","previous_headings":"Functionalities","what":"Search data","title":"HoloFoodR: interface to HoloFoodR database","text":"search animals, genome catalogues, samples viral catalogues, can use doQuery() function. can also use getData() doQuery() optimized searching datatypes. example, instead nested list sample types doQuery() returns sample types presence/absence table convenient. search animals, subset based whether include histological samples. Note can done also using query filters. doQuery() returns data.frame including information type data searched.","code":"animals <- doQuery(\"animals\", max.hits = 100) animals <- animals[ animals[[\"histological\"]], ]  colnames(animals) |> head() #> [1] \"accession\"            \"system\"               \"canonical_url\"        #> [4] \"histological\"         \"host_genomic\"         \"inflammatory_markers\""},{"path":"/articles/HoloFoodR.html","id":"get-data","dir":"Articles","previous_headings":"Functionalities","what":"Get data","title":"HoloFoodR: interface to HoloFoodR database","text":"Now information animal histological samples. Let’s get data animals know sample IDs fetch. returned value getData() function list. can data also data.frame specify flatten = TRUE. data information animals including samples drawn . elements list data.frames. example, “samples” table contains information samples drawn animals specified input. Now can collect sample IDs.","code":"animal_data <- getData(     accession.type = \"animals\", accession = animals[[\"accession\"]]) samples <- animal_data[[\"samples\"]]  colnames(samples) |> head() #> [1] \"accession\"        \"title\"            \"sample_type\"      \"animal\"           #> [5] \"canonical_url\"    \"metagenomics_url\" sample_ids <- unique(samples[[\"accession\"]])"},{"path":"/articles/HoloFoodR.html","id":"get-data-on-samples","dir":"Articles","previous_headings":"Functionalities","what":"Get data on samples","title":"HoloFoodR: interface to HoloFoodR database","text":"get data samples, can utilize getResult() function. returns data MultiAssayExperiment (MAE) format. MAE object stores individual omics TreeSummarizedExperiment (TreeSE) objects. TreeSE, column represents sample rows represent features.","code":"mae <- getResult(sample_ids) #> Warning: Data for the following samples cannot be found. The sample types are metagenomic_assembly, host_genomic, transcriptomic and metatranscriptomic. (Note that metagenomic assemblies can be found from the MGnify database. See MGnifyR package.): #> 'SAMEA10130025', 'SAMEA13389405', 'SAMEA13389406', 'SAMEA13901590', 'SAMEA13901591', 'SAMEA13929779', 'SAMEA7697591', 'SAMEA10130091', 'SAMEA13389692', 'SAMEA13389693', 'SAMEA13901708', 'SAMEA7571845', 'SAMEA10158030', 'SAMEA13389419', 'SAMEA13389420', 'SAMEA13901594', 'SAMEA13901595', 'SAMEA13929781', 'SAMEA7697592', 'SAMEA10130039', 'SAMEA13389496', 'SAMEA13389497', 'SAMEA13901618', 'SAMEA13901619', 'SAMEA13929785', 'SAMEA7571815', 'SAMEA10130112', 'SAMEA13389794', 'SAMEA13389795', 'SAMEA13901758', 'SAMEA13901759', 'SAMEA13929811', 'SAMEA7571864', 'SAMEA10158022', 'SAMEA13389146', 'SAMEA13389147', 'SAMEA13901511', 'SAMEA13901512', 'SAMEA13929767', 'SAMEA7571777', 'SAMEA10130019', 'SAMEA13389353', 'SAMEA13389354', 'SAMEA13389355', 'SAMEA13901574', 'SAMEA13901575', 'SAMEA14095991', 'SAMEA7722475', 'SAMEA10130101', 'SAMEA13389738', 'SAMEA13389739', 'SAMEA13901730', 'SAMEA13901731', 'SAMEA13929802', 'SAMEA7571856', 'SAMEA10455480', 'SAMEA13389220', 'SAMEA10129993', 'SAMEA13389183', 'SAMEA13389184', 'SAMEA13901520', 'SAMEA13901521', 'SAMEA7697579', 'SAMEA10130017', 'SAMEA13389345', 'SAMEA13389346', 'SAMEA13901571', 'SAMEA13901572', 'SAMEA13929772', 'SAMEA7571801', 'SAMEA10130113', 'SAMEA13389807', 'SAMEA13389808', 'SAMEA13901762', 'SAMEA13901763', 'SAMEA13929813', 'SAMEA7571866', 'SAMEA10455481', 'SAMEA13389227', 'SAMEA10455479', 'SAMEA13389169', 'SAMEA10130020', 'SAMEA13389357', 'SAMEA13389358', 'SAMEA13901576', 'SAMEA13901577', 'SAMEA13929773', 'SAMEA7697587', 'SAMEA10130100', 'SAMEA13389734', 'SAMEA13389735', 'SAMEA13901728', 'SAMEA13901729', 'SAMEA13929801', 'SAMEA7697622', 'SAMEA10130016', 'SAMEA13389342', 'SAMEA13389343', 'SAMEA13901569', 'SAMEA13901570', 'SAMEA13929771', 'SAMEA7571800', 'SAMEA10130040', 'SAMEA13389503', 'SAMEA13389504', 'SAMEA13901620', 'SAMEA13901621', 'SAMEA13929786', 'SAMEA7571816', 'SAMEA10129979', 'SAMEA13389081', 'SAMEA13389082', 'SAMEA13901489', 'SAMEA13901490', 'SAMEA7571769', 'SAMEA10130002', 'SAMEA13389243', 'SAMEA13389244', 'SAMEA13901540', 'SAMEA13901541', 'SAMEA7697582', 'SAMEA10129985', 'SAMEA13389133', 'SAMEA13389134', 'SAMEA13901505', 'SAMEA13901506', 'SAMEA13929764', 'SAMEA7571775', 'SAMEA10455476', 'SAMEA13389110', 'SAMEA10130031', 'SAMEA13389443', 'SAMEA13389444', 'SAMEA13901602', 'SAMEA13901603', 'SAMEA7571811', 'SAMEA10130023', 'SAMEA13389395', 'SAMEA13389396', 'SAMEA13901586', 'SAMEA13901587', 'SAMEA13929777', 'SAMEA7571806', 'SAMEA10130090', 'SAMEA13389687', 'SAMEA13389688', 'SAMEA13901707', 'SAMEA7571844', 'SAMEA10130119', 'SAMEA13389832', 'SAMEA13389833', 'SAMEA13901773', 'SAMEA13929818', 'SAMEA7697633', 'SAMEA10129996', 'SAMEA13389204', 'SAMEA13389205', 'SAMEA13901529', 'SAMEA13901530', 'SAMEA7697580', 'SAMEA10130088', 'SAMEA13389677', 'SAMEA13389678', 'SAMEA13901704', 'SAMEA13929799', 'SAMEA7571843' mae #> A MultiAssayExperiment object of 8 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 8: #>  [1] BIOGENIC AMINES: TreeSummarizedExperiment with 7 rows and 35 columns #>  [2] FATTY ACIDS: TreeSummarizedExperiment with 19 rows and 57 columns #>  [3] HISTOLOGY: TreeSummarizedExperiment with 20 rows and 57 columns #>  [4] INFLAMMATORY MARKERS: TreeSummarizedExperiment with 14 rows and 58 columns #>  [5] metagenomic_assembly: TreeSummarizedExperiment with 0 rows and 53 columns #>  [6] host_genomic: TreeSummarizedExperiment with 0 rows and 53 columns #>  [7] transcriptomic: TreeSummarizedExperiment with 0 rows and 44 columns #>  [8] metatranscriptomic: TreeSummarizedExperiment with 0 rows and 16 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files mae[[1]] #> class: TreeSummarizedExperiment  #> dim: 7 35  #> metadata(0): #> assays(1): counts #> rownames(7): Cadaverin Gesamtamine (Total biogenic amines) ... Spermin #>   Tyramin #> rowData names(4): marker.name marker.type marker.canonical_url units #> colnames(35): SAMEA112906114 SAMEA112906592 ... SAMEA112906002 #>   SAMEA112906785 #> colData names(13): accession sample_type ... Project Sample code #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> rowLinks: NULL #> rowTree: NULL #> colLinks: NULL #> colTree: NULL"},{"path":"/articles/HoloFoodR.html","id":"incorporate-with-mgnify-data","dir":"Articles","previous_headings":"Functionalities","what":"Incorporate with MGnify data","title":"HoloFoodR: interface to HoloFoodR database","text":"MGnifyR package can utilized fetch metagenomics data MGnify database. MGnifyR package, can use MGnifyR::searchAnalysis() function search analyses based sample IDs . can fetch data based accession IDs. MGnifyR::getResult() returns MAE object just like HoloFoodR. However, metagenomic data points individual analyses instead samples. can harmonize data replacing analysis IDs sample IDs, can combine data single MAE. Now, MAE object linking samples various omics together, compatibility ensured single omics datasets (Tree)SummarizedExperiment format. compatibility allows us harness cutting-edge downstream analytics tools like miaverse framework support data containers seamlessly.","code":"library(MGnifyR)  mg <- MgnifyClient(useCache = TRUE)  # Get those samples that are metagenomic samples metagenomic_samples <- samples[     samples[[\"sample_type\"]] == \"metagenomic_assembly\", ]  # Get analysis IDs based on sample IDs analysis_ids <- searchAnalysis(     mg, type = \"samples\", metagenomic_samples[[\"accession\"]]) head(analysis_ids) #>  SAMEA10130025   SAMEA7697591  SAMEA10130091   SAMEA7571845  SAMEA10158030  #> \"MGYA00606535\" \"MGYA00616692\" \"MGYA00606528\" \"MGYA00616689\" \"MGYA00606518\"  #>   SAMEA7697592  #> \"MGYA00615947\" mae_metagenomic <- MGnifyR::getResult(mg, analysis_ids) mae_metagenomic #> A MultiAssayExperiment object of 6 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 6: #>  [1] microbiota: TreeSummarizedExperiment with 675 rows and 52 columns #>  [2] go-slim: TreeSummarizedExperiment with 116 rows and 52 columns #>  [3] go-terms: TreeSummarizedExperiment with 3264 rows and 52 columns #>  [4] interpro-identifiers: TreeSummarizedExperiment with 19681 rows and 52 columns #>  [5] taxonomy: TreeSummarizedExperiment with 1438 rows and 52 columns #>  [6] taxonomy-lsu: TreeSummarizedExperiment with 1856 rows and 52 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files # Get experiments from metagenomic data exps <- experiments(mae_metagenomic) # Convert analysis names to sample names exps <- lapply(exps, function(x){     # Get corresponding sample ID     sample_id <- names(analysis_ids)[ match(colnames(x), analysis_ids) ]     # Replace analysis ID with sample ID     colnames(x) <- sample_id     return(x) })  # Add to original MultiAssayExperiment mae <- c(experiments(mae), exps) mae"},{"path":"/articles/HoloFoodR.html","id":"extra-get-data-from-metabolights-database","dir":"Articles","previous_headings":"Functionalities","what":"Extra: Get data from MetaboLights database","title":"HoloFoodR: interface to HoloFoodR database","text":"HoloFood database exclusively contains targeted metabolomic data. However, provides URL addresses linking MetaboLights database, untargeted metabolomics data can accessed. retrieve data, can utilize getMetaboLights() function retrieve information available data. Moreover, returns processed metabolomic data (processed data, can also use getReturn(x, get.metabolomic=TRUE)). , retrieve processed (mapped) metabolomic data associated HoloFood. result list includes three data.frames: spectra data, can either fetch files using getMetaboLightsFile(), follow vignette guidance loading data directly object, tailored metabolomics spectra data.","code":"# Get untargeted metabolomic samples samples <- doQuery(\"samples\", sample_type = \"metabolomic\") # Get the data metabolomic <- getMetaboLights(samples[[\"metabolomics_url\"]])  # Show names of data.frames names(metabolomic) - study metadata - assay metadata - assay that includes abundance table and feature metadata"},{"path":"/articles/HoloFoodR.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"HoloFoodR: interface to HoloFoodR database","text":"","code":"sessionInfo() #> R Under development (unstable) (2024-11-20 r87352) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HoloFoodR_1.1.1                 TreeSummarizedExperiment_2.15.0 #>  [3] Biostrings_2.75.1               XVector_0.47.0                  #>  [5] SingleCellExperiment_1.29.1     MultiAssayExperiment_1.33.1     #>  [7] SummarizedExperiment_1.37.0     Biobase_2.67.0                  #>  [9] GenomicRanges_1.59.1            GenomeInfoDb_1.43.1             #> [11] IRanges_2.41.1                  S4Vectors_0.45.2                #> [13] BiocGenerics_0.53.3             generics_0.1.3                  #> [15] MatrixGenerics_1.19.0           matrixStats_1.4.1               #> [17] knitr_1.49                      BiocStyle_2.35.0                #>  #> loaded via a namespace (and not attached): #>  [1] httr2_1.0.6             xfun_0.49               bslib_0.8.0             #>  [4] htmlwidgets_1.6.4       lattice_0.22-6          yulab.utils_0.1.8       #>  [7] vctrs_0.6.5             tools_4.5.0             curl_6.0.1              #> [10] parallel_4.5.0          tibble_3.2.1            fansi_1.0.6             #> [13] BiocBaseUtils_1.9.0     pkgconfig_2.0.3         Matrix_1.7-1            #> [16] desc_1.4.3              lifecycle_1.0.4         GenomeInfoDbData_1.2.13 #> [19] compiler_4.5.0          treeio_1.31.0           textshaping_0.4.0       #> [22] codetools_0.2-20        htmltools_0.5.8.1       sass_0.4.9              #> [25] lazyeval_0.2.2          yaml_2.3.10             tidyr_1.3.1             #> [28] pkgdown_2.1.1           pillar_1.9.0            crayon_1.5.3            #> [31] jquerylib_0.1.4         BiocParallel_1.41.0     DelayedArray_0.33.2     #> [34] cachem_1.1.0            abind_1.4-8             nlme_3.1-166            #> [37] tidyselect_1.2.1        digest_0.6.37           purrr_1.0.2             #> [40] dplyr_1.1.4             bookdown_0.41           fastmap_1.2.0           #> [43] grid_4.5.0              cli_3.6.3               SparseArray_1.7.2       #> [46] magrittr_2.0.3          S4Arrays_1.7.1          utf8_1.2.4              #> [49] ape_5.8                 rappdirs_0.3.3          UCSC.utils_1.3.0        #> [52] rmarkdown_2.29          httr_1.4.7              ragg_1.3.3              #> [55] evaluate_1.0.1          rlang_1.1.4             Rcpp_1.0.13-1           #> [58] tidytree_0.4.6          glue_1.8.0              BiocManager_1.30.25     #> [61] jsonlite_1.8.9          R6_2.5.1                systemfonts_1.1.0       #> [64] fs_1.6.5                zlibbioc_1.53.0"},{"path":"/articles/case_study.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"HoloFood database large collection holo-omic multi-omic data two animal systems, chicken salmon. created HoloFood consortium. One objectives study interactions animal systems, microbiomes, feed additives optimize diet strategies farm animals. make easily accessible, developers provide Application Programming Interface (API) permits interaction programming languages, R Python. improve accessibility creating HoloFoodR package simplifies API interaction assists translating raw database data R/Bioconductor data containers, connecting vast ecosystem bioinformatics R packages. aim demonstrate HoloFoodR isolation rest ecosystem, showcase possibility data integration databases, MGnify, holds metagenomic data. Furthermore, provide workflow data exploration advanced machine learning multi-omics, offering practical example readers. main study questions : treatment influence gut microbiota salmon? gut flora fatty acids composition evolve time? relationship gut microbiota fatty acid composition muscle tissue?","code":"# List of packages that we need packages <- c(     \"dplyr\", \"DT\", \"ggsignif\", \"HoloFoodR\", \"MGnifyR\", \"mia\", \"miaViz\", \"MOFA2\",     \"patchwork\", \"reticulate\", \"scater\", \"shadowtext\" )  # Load all packages into session. Stop if there are packages that were not # successfully loaded pkgs_not_loaded <- !sapply(packages, require, character.only = TRUE) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> Loading required package: DT #> Loading required package: ggsignif #> Loading required package: HoloFoodR #> Loading required package: MultiAssayExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'matrixStats' #> The following object is masked from 'package:dplyr': #>  #>     count #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: 'generics' #> The following object is masked from 'package:dplyr': #>  #>     explain #> The following objects are masked from 'package:base': #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: 'BiocGenerics' #> The following object is masked from 'package:dplyr': #>  #>     combine #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, is.unsorted, lapply, Map, mapply, match, mget, #>     order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, #>     rbind, Reduce, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:dplyr': #>  #>     first, rename #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #>  #> Attaching package: 'IRanges' #> The following objects are masked from 'package:dplyr': #>  #>     collapse, desc, slice #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians #> Loading required package: TreeSummarizedExperiment #> Loading required package: SingleCellExperiment #> Loading required package: Biostrings #> Loading required package: XVector #>  #> Attaching package: 'Biostrings' #> The following object is masked from 'package:base': #>  #>     strsplit #> Loading required package: MGnifyR #>  #> Attaching package: 'MGnifyR' #> The following objects are masked from 'package:HoloFoodR': #>  #>     doQuery, getData, getResult #> Loading required package: mia #> This is mia version 1.15.6 #> - Online documentation and vignettes: https://microbiome.github.io/mia/ #> - Online book 'Orchestrating Microbiome Analysis (OMA)': https://microbiome.github.io/OMA/docs/devel/ #>  #> Attaching package: 'mia' #> The following objects are masked from 'package:dplyr': #>  #>     full_join, inner_join, left_join, right_join #> Loading required package: miaViz #> Loading required package: ggplot2 #> Loading required package: ggraph #>  #> Attaching package: 'miaViz' #> The following object is masked from 'package:mia': #>  #>     plotNMDS #> Loading required package: MOFA2 #>  #> Attaching package: 'MOFA2' #> The following object is masked from 'package:stats': #>  #>     predict #> Loading required package: patchwork #> Loading required package: reticulate #> Loading required package: scater #> Loading required package: scuttle #> Loading required package: shadowtext pkgs_not_loaded <- names(pkgs_not_loaded)[pkgs_not_loaded] if (length(pkgs_not_loaded) > 0) {     stop(\"Error in loading the following packages into the session: '\",         paste0(pkgs_not_loaded, collapse = \"', '\"), \"'\") }"},{"path":"/articles/case_study.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import data","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"start workflow data retrieval. use salmon data associated fatty acid metagenomic amplicon example.","code":""},{"path":"/articles/case_study.html","id":"retrieve-holofood-data","dir":"Articles","previous_headings":"Import data","what":"Retrieve HoloFood data","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"First , query HoloFood database retrieve salmon accession numbers. Next, can retrieve data associated salmon. data returned list sample accession numbers associated salmons. example, metagenomic amplicon samples, SAMEA112750580 fatty acid samples, SAMEA112950027. can use accession numbers fetch data associated sample type store experiments MultiAssayExperiment (MAE) object.","code":"# Get salmon samples salmons <- HoloFoodR::doQuery(\"animals\", system = \"salmon\", use.cache = TRUE)  # Get only the data that has both metagenomic amplicon and fatty acid # data salmons <- salmons |>     filter(fatty_acids == TRUE & metagenomic_amplicon == TRUE)  colnames(salmons) # Get salmon data salmon_data <- HoloFoodR::getData(     accession.type = \"animals\",     accession = salmons[[\"accession\"]],     use.cache = TRUE )  # Get salmon samples salmon_samples <- salmon_data[[\"samples\"]]  # Get sample IDs salmon_sample_ids <- unique(salmon_samples[[\"accession\"]])  head(salmon_sample_ids) # Get salmon <- experiments as MAE object mae <- HoloFoodR::getResult(     salmon_sample_ids,     use.cache = TRUE )"},{"path":"/articles/case_study.html","id":"fetch-metagenomic-data-from-mgnify","dir":"Articles","previous_headings":"Import data","what":"Fetch metagenomic data from MGnify","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"HoloFood database include data metagenomic data. data can retrieved MGnify portal. purpose, use MGnifyR package, similar fashion HoloFoodR, allows simple interaction MGnify API. salmon_analysis_ids character vector holds associations HoloFood metagenomic amplicon accession numbers (SAMEAxxxxxx) counterparts MGnify database (MGYAxxxxxx). Data fetched MGnify MGnify-specific identifiers. first rename samples HoloFood specific ID add data MultiAssayExperiment combining data. Now retrieved data interested workflow.","code":"# Create MGnify object mg <- MgnifyClient(     useCache = TRUE,     cacheDir = \".MGnifyR_cache\" )  # Select only metagenomic_amplicon sample type metagenomic_salmon_samples <- salmon_samples |>     filter(sample_type == \"metagenomic_amplicon\")  # Search for sample IDs in MGnify database salmon_analysis_ids <- searchAnalysis(     mg,     type = \"samples\",     metagenomic_salmon_samples[[\"accession\"]] ) # Get metagenomic taxonomic data for salmon from MGnify tse <- MGnifyR::getResult(     mg,     accession = salmon_analysis_ids,     get.func = FALSE ) # Add MGnify results to HoloFood data mae <- addMGnify(tse, mae) #> Warning: 'experiments' dropped; see 'drops()' #> harmonizing input: #>   removing 189 sampleMap rows not in names(experiments) #> harmonizing input: #>   removing 189 sampleMap rows not in names(experiments)"},{"path":"/articles/case_study.html","id":"data-preprocess","dir":"Articles","previous_headings":"","what":"Data preprocess","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"Data cleaning one time-consuming important steps data analysis. instance, need handle missing data, transform data assays, agglomerate data. next steps, : Filter data Ensure data correct format analysis Agglomerate data Transform data","code":""},{"path":"/articles/case_study.html","id":"wrangle-the-data","dir":"Articles","previous_headings":"Data preprocess","what":"Wrangle the data","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"see upset plot summarizes available experiments samples overlap . distribution experiments dataset, along number samples experiment. demonstration purposes, focus investigating fatty acids metagenomic data within trial performed HoloFood consortium. trial health effects fermented seaweed added diet salmons. following script subsets data include aforementioned data. values fatty acids detection thresholds. assume zeroes. Moreover, data includes feature just states fatty acids collected. remove feature ensure assay contains numeric values. Moreover, wrangle sample metadata includes necessary information.","code":"upset_plot <- upsetSamples(mae) upset_plot # Harmonize experiment names names(mae) <- names(mae) |>     tolower() |>     gsub(pattern = \" \", replacement = \"_\")  # Fetch only experiments that we need mae <- mae[, , c(\"fatty_acids_mg\", \"metagenomic\")] #> Warning: 'experiments' dropped; see 'drops()' #> harmonizing input: #>   removing 934 sampleMap rows not in names(experiments) names(mae) <- c(\"fatty_acids\", \"metagenomic\") # Filter MAE object to include only Trial A mae <- mae[, colData(mae)[[\"Trial code\"]] == \"SA\", ] # From metabolomic data, remove organ-fatty acids row because it only contains a # string value \"muscle\" which denotes where the sample was drawn from tse <- mae[[1]] tse <- tse[!(rowData(tse)[[\"marker.name\"]] %in% c(\"Organ-fatty acids\")), ] mae[[1]] <- tse  # Transform matrix to numeric. Some values are \"< 0.01\" # If a number is < 0.01, assume it to be 0 assay <- assay(mae[[1]], \"counts\") assay[assay == \"<0.01\"] <- 0 assay <- apply(assay, c(1, 2), function(x) as.numeric(gsub(\",\", \".\", x)))  # Reassign assay back to MAE assay(mae[[1]], \"counts\") <- assay # Add time points timepoints <- colData(mae[[2]]) timepoints <- timepoints[     match(timepoints[[\"animal\"]], rownames(colData(mae))), ] timepoints <- ifelse(timepoints[[\"trial.timepoint\"]] == 0, \"start\", \"end\") timepoints <- factor(timepoints, levels = c(\"start\", \"end\")) colData(mae)[[\"timepoint\"]] <- timepoints  # Add treatment groups colData(mae)[[\"study_group\"]] <- ifelse(     colData(mae)[[\"Treatment concentration\"]]>0, \"treatment\", \"control\") colData(mae)[colData(mae)[[\"timepoint\"]] == \"start\" , \"study_group\"] <-     \"control\"  # Add animal metadata to separate experiments mae[[1]] <- getWithColData(mae, 1) #> Warning: Ignoring redundant column names in 'colData(x)': canonical_url, #> marker.type mae[[2]] <- getWithColData(mae, 2) #> Warning: Ignoring redundant column names in 'colData(x)': canonical_url, #> marker.type"},{"path":"/articles/case_study.html","id":"filtering-and-agglomeration","dir":"Articles","previous_headings":"Data preprocess","what":"Filtering and agglomeration","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"Next, can agglomerate features prevalence reduce number low-abundant taxa contaminants. First, visualize prevalence distribution taxa histogram decide prevalence threshold use. use 0.2% detection level filter extremely low-abundant genera. prevalence microbial genera across samples. can also look raw prevalence numbers. Mycoplasma present samples, surprising genus found one common salmon intestine (see Zarkasi et al. (2014)). agglomerate data prevalence taxonomic rank obtain group genera specified thresholds “” group. step necessary ensure work relevant taxa, excluding rest data points. use thresholds 20% 0.2% prevalence detection, respectively. Due limited number samples, also filter fatty acid data include fatty acids show variation within dataset. rationale fatty acid vary, exhibit differences groups. can find good threshold cutoff histogram standard deviations fatty acid abundances. distribution standard deviations fatty acid abundances. Percentage fatty acids standard deviation (SD) 0.5: 61.7% Percentage fatty acids standard deviation (SD) 1: 73.3% apply filtering threshold 0.5 exclude fatty acids exhibit sufficient variation dataset. Since standard deviations 1, reasonable number want exclude many fatty acids. detailed analysis, pick certain fatty acids well-established biological relevance. include: Docosahexaenoic acid (DHA) Eicosapentaenoic acid (EPA) Alpha-linolenic acid Arachidonic acid Linoleic acid Oleic acid Palmitic acid Stearic acid","code":"# Add relative abundance data mae[[2]] <- transformAssay(mae[[2]], method = \"relabundance\")  # Compute prevalence of relative abundance of microbial genera at detection # level of 0.1% prevalence <- getPrevalence(     mae[[2]],     rank = \"Genus\",     assay.type = \"relabundance\",     na.rm = TRUE,     sort = TRUE,     detection = 0.2 / 100 )  # Exclude microbes with 0 prevalence prevalence <- prevalence[prevalence != 0]  hist(prevalence, main = \"\", xlab = \"Prevalence\") # Sort prevalence in decreasing order sort(prevalence, decreasing = TRUE) |> head(10) #>     Mycoplasma Photobacterium     Aliivibrio  Cetobacterium         Vibrio  #>      0.9777778      0.7111111      0.4000000      0.2666667      0.2444444  #> Ammopiptanthus    Francisella    Paucibacter  Mycobacterium       Medicago  #>      0.1555556      0.1333333      0.1111111      0.1111111      0.1111111 # Agglomerate by prevalence by genus altExp(mae[[2]], \"prev_genus\") <- agglomerateByPrevalence(     mae[[2]],     assay.type = \"relabundance\",     rank = \"Genus\",     prevalence = 20 / 100,     detection = 0.2 / 100 ) rowData(mae[[1]])[[\"sd\"]] <- rowSds(assay(mae[[1]], \"counts\"), na.rm = TRUE) hist(rowData(mae[[1]])[[\"sd\"]], breaks = 30, main = \"\",     xlab = \"Standard deviation\")  # Increase the number of x axis ticks x_labels <- seq(from = min(assay(mae[[1]])), to = max(assay(mae[[1]])), by = 1) axis(side = 1, at = x_labels, labels = x_labels) mae[[1]] <- mae[[1]][ rowData(mae[[1]])[[\"sd\"]] > 0.5, ] relevant_fatty_acids <- c(     \"Docosahexaenoic acid 22:6n-3 (DHA)\",     \"Eicosapentaenoic acid 20:5n-3 (EPA)\",     \"Alpha-Linolenic acid 18:3n-3\",     \"Arachidonic acid 20:4n-6 (ARA)\",     \"Linoleic acid 18:2n-6\",     \"Oleic acid 18:1n-9\",     \"Palmitic acid 16:0\",     \"Stearic acid 18:0\" ) altExp(mae[[1]], \"relevant\") <- mae[[1]][     rownames(mae[[1]]) %in% relevant_fatty_acids, ]"},{"path":"/articles/case_study.html","id":"transformation","dir":"Articles","previous_headings":"Data preprocess","what":"Transformation","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"transform metagenomic counts relative transformation centered log-ratio method tackle compositional data (see Quinn et al. (2019)). Fatty acid data already compositional measured concentration (mg/g). apply log10 transformation address skewness data. Finally, data standardized ensure features comparable scale.","code":"# Transform microbiome with centered log-ratio method mae[[2]] <- transformAssay(     mae[[2]],     assay.type = \"counts\",     method = \"relabundance\",     MARGIN = \"cols\" ) mae[[2]] <- transformAssay(     mae[[2]],     assay.type = \"counts\",     method = \"clr\",     pseudocount = TRUE,     MARGIN = \"cols\" ) #> A pseudocount of 0.5 was applied. #> A pseudocount of 0.5 was applied. mae[[1]] <- transformAssay(     mae[[1]],     assay.type = \"counts\",     method = \"log10\",     MARGIN = \"cols\" ) mae[[1]] <- transformAssay(     mae[[1]],     assay.type = \"log10\",     method = \"standardize\",     MARGIN = \"rows\" )"},{"path":"/articles/case_study.html","id":"analyzing-fatty-acids-time-and-treatment-effects","dir":"Articles","previous_headings":"","what":"Analyzing fatty acids: Time and treatment effects","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"aim investigate fatty acids evolve time , importantly, whether feed additive impacts fatty acids. achieve , fit simple linear model fatty acid, accounting time treatment effects non-parametric manner. models resemble Wilcoxon test include additional covariates. approach allow us estimate variability explained time, treatment, factors. observed, treatment appear affect fatty acid concentrations significantly. contrast, time seems influence nearly fatty acids; salmon grow, certain fatty acid concentrations muscle tissue increase. relationship can visualized follows. Concentrations selected fatty acids start end trial, indication whether animals received treatment.","code":"# Get fatty acids that we are going to test tse <- altExp(mae[[1]], \"relevant\")  # For each fatty acid, fit linear model res <- lapply(rownames(tse), function(feat){     # Get data of single feature     df <- meltSE(tse[feat, ], add.col = TRUE)     # Fit model     res <- lm(rank(counts) ~ study_group + timepoint, data = df)     # Get only p-values     res <- summary(res)     res <- res[[4]][, 4]     return(res) }) # Combine results and adjust p-values res <- do.call(rbind, res) |> as.data.frame() res <- lapply(res, p.adjust, method = \"fdr\") |> as.data.frame() # Add feature names res[[\"feature\"]] <- rownames(tse) res |> datatable() p <- plotExpression(     tse, rownames(tse), assay.type = \"counts\", x = \"timepoint\",     colour_by = \"study_group\", scales = \"free\") p"},{"path":[]},{"path":"/articles/case_study.html","id":"microbial-composition","dir":"Articles","previous_headings":"Analyzing microbiota: Time and treatment effects","what":"Microbial composition","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"first step analysing microbiota data, summarize microbial composition relative abundance barplot. Relative abundance core microbial genera across samples. Salmon gut seems dominated either genus Mycoplasma Photobacterium.","code":"p <- plotAbundance(     altExp(mae[[2]], \"prev_genus\"),     assay.type = \"relabundance\",     col.var = c(\"study_group\", \"timepoint\"),     facet.cols = TRUE, scales = \"free_x\"     ) +   guides(fill = guide_legend(title = \"Genus\")) p #> Warning: Removed 44 rows containing missing values or values outside the scale range #> (`geom_bar()`)."},{"path":"/articles/case_study.html","id":"association-of-alpha-diversity-with-treatment-and-salmon-age","dir":"Articles","previous_headings":"Analyzing microbiota: Time and treatment effects","what":"Association of alpha diversity with treatment and salmon age","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"Now, let’s proceed calculate Shannon alpha diversity index. alpha diversity indices calculated added colData, can now assess whether time treatment influence microbial diversity salmon gut flora. Based results, conclude older salmon exhibit distinct microbial diversity compared younger ones. Additionally, appears slight — though statistically significant — effect treatment microbial diversity. Shannon diversity microbial communities salmon start end trial, information treatment status.","code":"# Calculate alpha diversity mae[[2]] <- addAlpha(mae[[2]]) #> Warning: 'faith' index can be calculated only for TreeSE with rowTree(x) #> populated or with 'tree' provided separately. # Get sample metadata df <- colData(mae[[2]]) # Fit model to estimate influence of treatment and time to diversity res <- lm(rank(shannon_diversity) ~ study_group + timepoint, data = df) res <- summary(res) res #>  #> Call: #> lm(formula = rank(shannon_diversity) ~ study_group + timepoint,  #>     data = df) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -20.933 -10.267  -3.267   9.067  27.200  #>  #> Coefficients: #>                      Estimate Std. Error t value Pr(>|t|)     #> (Intercept)            16.800      3.138   5.353 3.36e-06 *** #> study_grouptreatment   -8.333      4.438  -1.878  0.06738 .   #> timepointend           13.467      4.438   3.034  0.00412 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 12.15 on 42 degrees of freedom #> Multiple R-squared:  0.1826, Adjusted R-squared:  0.1436  #> F-statistic:  4.69 on 2 and 42 DF,  p-value: 0.0145 p <- plotColData(     mae[[2]], x = \"timepoint\", y = \"shannon_diversity\",     colour_by = \"study_group\") p"},{"path":"/articles/case_study.html","id":"microbial-dissimilarity-among-samples","dir":"Articles","previous_headings":"Analyzing microbiota: Time and treatment effects","what":"Microbial dissimilarity among samples","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"Let’s analyze whether can find similar effect beta diversity. perform Principal Coordinate Analysis (PCoA) Bray-Curtis dissimilarity. PCoA (Bray-Curtis) microbial data. Distinct patterns PCoA plot show samples clustering time points, indicating microbial profiles vary salmon age. reinforces results observed alpha diversity, supporting association age shifts microbial diversity.","code":"# Run PCoA mae[[2]] <- runMDS(     mae[[2]],     FUN = getDissimilarity,     method = \"bray\",     assay.type = \"relabundance\" )  # Display dissimilarity on a plot p <- plotReducedDim(mae[[2]], \"MDS\", colour_by = \"timepoint\") p"},{"path":"/articles/case_study.html","id":"multi-omics-integration","dir":"Articles","previous_headings":"","what":"Multi-omics integration","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"Multi-omic factor analysis (MOFA) (see Argelaguet et al. (2020)) allows us discover latent factors underlie biological differences taking consideration 2 omic assays. cite original authors, “MOFA can viewed statistically rigorous generalization (sparse) principal component analysis (PCA) multi-omics data”. applying MOFA analysis, goal determine whether metagenomics fatty acids exhibit shared variability, ultimately assessing whether microbial community associated fatty acid composition. Next, plot variances explained factor. Explained variance model microbial fatty acid data. Factor 1 captures variance within metagenomics data, 2/3 variance captured Factor 2 represents variance fatty acids. Factor 3 captures shared variability metagenomic data fatty acids, reflecting interconnected patterns two datasets. exploring shared variability, first examine metagenomic variability captured Factor 1. plot fatty acid weights captured variability factor 1 fatty acids 0% seen previous plot. Features highest loadings Factor 1. plot , can see first factor captures mostly variability Mycoplasma. Let us focus loadings factor 2. Features highest loadings Factor 2. microbial data, particularly Cetobacterium, Vibrio, Aliivibrio show negative association Factor 2. Additionally, many fatty acids display significant negative weights factor, though single fatty acid can specifically tied taxa. suggests abundances taxa rise (decrease), corresponding increase (decrease) overall fatty acid levels. Next, visualize Factor 3 captured variance evenly microbes fatty acids. Features highest loadings Factors 3. shared Factor 3, Photobacterium emerge prominently. Similarly Factor 2, single fatty acid can directly associated microbial species, including Photobacterium. Worth noting , 5 taxa, Mycoplasma appear share variability fatty acids variability captured first factor associate fatty acids.","code":"mae_temp <- mae mae_temp[[2]] <- altExp(mae_temp[[2]], \"prev_genus\")  # Extract only transformed metagenomic assays for MOFA analysis assays(mae_temp[[1]]) <- assays(mae_temp[[1]])[     names(assays(mae_temp[[1]])) %in% c(\"standardize\") ] assays(mae_temp[[2]]) <- assays(mae_temp[[2]])[     names(assays(mae_temp[[2]])) %in% c(\"counts\") ]  # Transform MAE object to MOFA model model <- create_mofa_from_MultiAssayExperiment(mae_temp)  # Set model's options model_opts <- get_default_model_options(model) model_opts$num_factors <- 5 model_opts$likelihoods[[2]] <- \"poisson\" train_opts <- get_default_training_options(model) train_opts$maxiter <- 20000  # Change convergence mode to slightly improve accuracy train_opts$convergence_mode <- \"slow\"  # Prepare MOFA model model <- prepare_mofa(     object = model,     model_options = model_opts,     training_options = train_opts ) #> Warning in prepare_mofa(object = model, model_options = model_opts, #> training_options = train_opts): Some view(s) have less than 15 features, MOFA #> will have little power to to learn meaningful factors for these view(s).... #> Checking data options... #> No data options specified, using default... #> Checking training options... #> Checking model options...  # Train model model <- run_mofa(model, use_basilisk = TRUE) #> Warning in run_mofa(model, use_basilisk = TRUE): No output filename provided. Using /tmp/RtmpqmKu8j/mofa_20241125-114000.hdf5 to store the trained model. #> Connecting to the mofapy2 package using basilisk.  #>     Set 'use_basilisk' to FALSE if you prefer to manually set the python binary using 'reticulate'. #> + /github/home/.cache/R/basilisk/1.19.0/0/bin/conda create --yes --prefix /github/home/.cache/R/basilisk/1.19.0/MOFA2/1.17.0/mofa_env 'python=3.10.5' --quiet -c conda-forge --override-channels #> + /github/home/.cache/R/basilisk/1.19.0/0/bin/conda install --yes --prefix /github/home/.cache/R/basilisk/1.19.0/MOFA2/1.17.0/mofa_env 'python=3.10.5' -c conda-forge --override-channels #> + /github/home/.cache/R/basilisk/1.19.0/0/bin/conda install --yes --prefix /github/home/.cache/R/basilisk/1.19.0/MOFA2/1.17.0/mofa_env -c conda-forge 'python=3.10.5' 'python=3.10.5' 'numpy=1.23.1' 'scipy=1.8.1' 'pandas=1.4.3' 'h5py=3.6.0' 'scikit-learn=1.1.1' 'dtw-python=1.2.2' --override-channels # Plot explained variances p <- plot_variance_explained(model) # Get explained variances from model as numeric values df <- model@cache[[1]][[2]][[1]] |> stack() df[[\"percentage\"]] <- paste0(round(df[[\"value\"]]), \"%\") # Add them to plot p <- p + geom_shadowtext(aes(label = df[[\"percentage\"]])) p p2 <- plot_top_weights(model, view = 2, factors = 1, nfeatures = 25) +     labs(title = \"Microbiota\")  p2 p1 <- plot_top_weights(model, view = 1, factors = 2, nfeatures = 25) +     labs(title = \"Fatty acids\") p2 <- plot_top_weights(model, view = 2, factors = 2, nfeatures = 25) +     labs(title = \"Microbiota\")  p1 + p2 p1 <- plot_top_weights(model, view = 1, factors = 3, nfeatures = 25) +     labs(title = \"Fatty acids\") p2 <- plot_top_weights(model, view = 2, factors = 3, nfeatures = 25) +     labs(title = \"Microbiota\")  p1 + p2"},{"path":"/articles/case_study.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"present case study demonstrated easy fast download large dataset transform data MultiAssayExperiment, turn gives researchers access extensive plethora downstream tools, mia MOFA2 can used pre-process visualize multi-omics data.","code":""},{"path":"/articles/case_study.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"HoloFoodR: a statistical programming framework for holo-omics data integration workflows","text":"","code":"features <- c(     \"Docosahexaenoic acid 22:6n-3 (DHA)\", \"Eicosapentaenoic acid 20:5n-3 (EPA)\") tse <- mae[[1]] tse <- tse[features, ] rownames(tse) <- c(\"DHA\", \"EPA\") p1 <- plotExpression(     tse, rownames(tse), assay.type = \"counts\", x = \"timepoint\",     colour_by = \"study_group\", scales = \"free\", ncol = 1) +     labs(x = \"Time point\", y = \"Concentration [mg/g]\") +     guides(colour = guide_legend(title = \"Study group\"))  p2 <- plotAbundance(     altExp(mae[[2]], \"prev_genus\"),     assay.type = \"relabundance\",     col.var = c(\"study_group\", \"timepoint\"),     facet.cols = TRUE, scales = \"free_x\"     ) +     labs(y = \"Relative abundance\")   guides(fill = guide_legend(title = \"Genus\")) #> <Guides[1] ggproto object> #>  #> fill : <GuideLegend>  p1 + p2  + plot_layout(widths = c(1, 2)) #> Warning: Removed 44 rows containing missing values or values outside the scale range #> (`geom_bar()`). sessionInfo() #> R Under development (unstable) (2024-11-20 r87352) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] shadowtext_0.1.4                scater_1.35.0                   #>  [3] scuttle_1.17.0                  reticulate_1.40.0               #>  [5] patchwork_1.3.0                 MOFA2_1.17.0                    #>  [7] miaViz_1.15.2                   ggraph_2.2.1                    #>  [9] ggplot2_3.5.1                   mia_1.15.6                      #> [11] MGnifyR_1.3.0                   HoloFoodR_1.1.1                 #> [13] TreeSummarizedExperiment_2.15.0 Biostrings_2.75.1               #> [15] XVector_0.47.0                  SingleCellExperiment_1.29.1     #> [17] MultiAssayExperiment_1.33.1     SummarizedExperiment_1.37.0     #> [19] Biobase_2.67.0                  GenomicRanges_1.59.1            #> [21] GenomeInfoDb_1.43.1             IRanges_2.41.1                  #> [23] S4Vectors_0.45.2                BiocGenerics_0.53.3             #> [25] generics_0.1.3                  MatrixGenerics_1.19.0           #> [27] matrixStats_1.4.1               ggsignif_0.6.4                  #> [29] DT_0.33                         dplyr_1.1.4                     #> [31] knitr_1.49                      BiocStyle_2.35.0                #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.5.0               filelock_1.0.3              #>   [3] ggplotify_0.1.2             urltools_1.7.3              #>   [5] tibble_3.2.1                triebeard_0.4.1             #>   [7] polyclip_1.10-7             basilisk.utils_1.19.0       #>   [9] rpart_4.1.23                DirichletMultinomial_1.49.0 #>  [11] lifecycle_1.0.4             httr2_1.0.6                 #>  [13] lattice_0.22-6              MASS_7.3-61                 #>  [15] crosstalk_1.2.1             SnowballC_0.7.1             #>  [17] backports_1.5.0             magrittr_2.0.3              #>  [19] Hmisc_5.2-0                 sass_0.4.9                  #>  [21] rmarkdown_2.29              jquerylib_0.1.4             #>  [23] yaml_2.3.10                 RColorBrewer_1.1-3          #>  [25] cowplot_1.1.3               DBI_1.2.3                   #>  [27] minqa_1.2.8                 abind_1.4-8                 #>  [29] zlibbioc_1.53.0             Rtsne_0.17                  #>  [31] purrr_1.0.2                 yulab.utils_0.1.8           #>  [33] nnet_7.3-19                 tweenr_2.0.3                #>  [35] rappdirs_0.3.3              sandwich_3.1-1              #>  [37] GenomeInfoDbData_1.2.13     ggrepel_0.9.6               #>  [39] tokenizers_0.3.0            irlba_2.3.5.1               #>  [41] tidytree_0.4.6              pheatmap_1.0.12             #>  [43] vegan_2.6-8                 rbiom_1.0.3                 #>  [45] tidyjson_0.3.2              pkgdown_2.1.1               #>  [47] permute_0.9-7               DelayedMatrixStats_1.29.0   #>  [49] codetools_0.2-20            DelayedArray_0.33.2         #>  [51] ggforce_0.4.2               tidyselect_1.2.1            #>  [53] aplot_0.2.3                 UCSC.utils_1.3.0            #>  [55] farver_2.1.2                lme4_1.1-35.5               #>  [57] ScaledMatrix_1.15.0         viridis_0.6.5               #>  [59] base64enc_0.1-3             jsonlite_1.8.9              #>  [61] BiocNeighbors_2.1.0         decontam_1.27.0             #>  [63] tidygraph_1.3.1             Formula_1.2-5               #>  [65] systemfonts_1.1.0           ggnewscale_0.5.0            #>  [67] tools_4.5.0                 treeio_1.31.0               #>  [69] ragg_1.3.3                  Rcpp_1.0.13-1               #>  [71] glue_1.8.0                  BiocBaseUtils_1.9.0         #>  [73] gridExtra_2.3               SparseArray_1.7.2           #>  [75] xfun_0.49                   mgcv_1.9-1                  #>  [77] HDF5Array_1.35.1            withr_3.0.2                 #>  [79] BiocManager_1.30.25         fastmap_1.2.0               #>  [81] ggh4x_0.2.8                 basilisk_1.19.0             #>  [83] rhdf5filters_1.19.0         boot_1.3-31                 #>  [85] bluster_1.17.0              fansi_1.0.6                 #>  [87] digest_0.6.37               rsvd_1.0.5                  #>  [89] gridGraphics_0.5-1          R6_2.5.1                    #>  [91] textshaping_0.4.0           colorspace_2.1-1            #>  [93] lpSolve_5.6.22              UpSetR_1.4.0                #>  [95] utf8_1.2.4                  tidyr_1.3.1                 #>  [97] data.table_1.16.2           DECIPHER_3.3.0              #>  [99] graphlayouts_1.2.1          httr_1.4.7                  #> [101] htmlwidgets_1.6.4           S4Arrays_1.7.1              #> [103] uwot_0.2.2                  pkgconfig_2.0.3             #> [105] gtable_0.3.6                janeaustenr_1.0.0           #> [107] htmltools_0.5.8.1           bookdown_0.41               #> [109] scales_1.3.0                png_0.1-8                   #> [111] corrplot_0.95               ggfun_0.1.7                 #> [113] rstudioapi_0.17.1           reshape2_1.4.4              #> [115] checkmate_2.3.2             nlme_3.1-166                #> [117] nloptr_2.1.1                rhdf5_2.51.0                #> [119] cachem_1.1.0                zoo_1.8-12                  #> [121] stringr_1.5.1               parallel_4.5.0              #> [123] vipor_0.4.7                 foreign_0.8-87              #> [125] desc_1.4.3                  pillar_1.9.0                #> [127] grid_4.5.0                  vctrs_0.6.5                 #> [129] slam_0.1-55                 BiocSingular_1.23.0         #> [131] beachmat_2.23.1             cluster_2.1.6               #> [133] beeswarm_0.4.0              htmlTable_2.4.3             #> [135] evaluate_1.0.1              mvtnorm_1.3-2               #> [137] cli_3.6.3                   compiler_4.5.0              #> [139] rlang_1.1.4                 crayon_1.5.3                #> [141] tidytext_0.4.2              labeling_0.4.3              #> [143] forcats_1.0.0               mediation_4.5.0             #> [145] plyr_1.8.9                  fs_1.6.5                    #> [147] ggbeeswarm_0.7.2            stringi_1.8.4               #> [149] viridisLite_0.4.2           BiocParallel_1.41.0         #> [151] assertthat_0.2.1            munsell_0.5.1               #> [153] lazyeval_0.2.2              Matrix_1.7-1                #> [155] dir.expiry_1.15.0           sparseMatrixStats_1.19.0    #> [157] Rhdf5lib_1.29.0             memoise_2.0.1               #> [159] igraph_2.1.1                RcppParallel_5.1.9          #> [161] bslib_0.8.0                 ggtree_3.15.0               #> [163] ape_5.8"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tuomas Borman. Author, maintainer. Artur Sannikov. Author. Leo Lahti. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Borman T, Sannikov , Lahti L (2024). HoloFoodR: R interface EBI HoloFood resource. R package version 1.1.1, https://github.com/EBI-Metagenomics/HoloFoodR.","code":"@Manual{,   title = {HoloFoodR: R interface to EBI HoloFood resource},   author = {Tuomas Borman and Artur Sannikov and Leo Lahti},   year = {2024},   note = {R package version 1.1.1},   url = {https://github.com/EBI-Metagenomics/HoloFoodR}, }"},{"path":"/index.html","id":"holofoodr-","dir":"","previous_headings":"","what":"R interface to EBI HoloFood resource","title":"R interface to EBI HoloFood resource","text":"R package developed streamlining integration analysis EMBL-EBI HoloFood data. utility package simplifies access resource, enabling direct loading data formats tailored multiomics downstream analytics. tool, users can efficiently search retrieve data EBI HoloFood resource. retrieved data available MultiAssayExperiment / TreeSummarizedExperiment format similarly data acquired MGnifyR package MGnify database. compatibility ensures users can seamlessly combine analyze datasets sources, leading valuable insights intricate biological systems. research received funding Horizon 2020 Programme European Union within FindingPheno project grant agreement 952914.","code":""},{"path":"/index.html","id":"findingpheno-","dir":"","previous_headings":"","what":"FindingPheno","title":"R interface to EBI HoloFood resource","text":"FindingPheno, EU-funded project, dedicated developing computational tools methodologies integration analysis multi-omics data. primary objective deepen understanding interactions hosts microbiomes. FindingPheno website","code":""},{"path":"/index.html","id":"holofood-","dir":"","previous_headings":"","what":"HoloFood","title":"R interface to EBI HoloFood resource","text":"HoloFood, project funded EU’s Horizon 2020 programme, employed holistic, “hologenomic”, approach enhance efficiency food production systems. involved exploring biomolecular physiological processes triggered incorporation feed additives novel sustainable feeds farmed animals. HoloFood database, hosted European Bioinformatics Institute (EMBL-EBI), houses data gathered project, encompassing multiple omics, including metabolomics various biomolecular measurements. Notably, include data metagenomic untargeted metabolomic analyses. However, metagenomic data project can accessed MGnify database, untargeted metabolomic data stored MetaboLights database. explore available datasets HoloFood, can utilize API browser. HoloFood website HoloFood publications API browser API documentation","code":""},{"path":"/index.html","id":"mgnify-","dir":"","previous_headings":"","what":"MGnify","title":"R interface to EBI HoloFood resource","text":"EMBL-EBI’s MGnify serves repository microbiome data, offering wide array analyses encompassing metabarcoding, metatranscriptomic, metagenomic datasets diverse environments. platform provides comprehensive taxonomic assignments functional annotations datasets. data can accessed MGnifyR package. MGnify website MGnifyR","code":""},{"path":"/index.html","id":"metabolights-","dir":"","previous_headings":"","what":"MetaboLights","title":"R interface to EBI HoloFood resource","text":"MetaboLights, managed EMBL-EBI, serves repository metabolomic data. can accessed HoloFoodR package. MetaboLights website","code":""},{"path":"/index.html","id":"miaverse-","dir":"","previous_headings":"","what":"miaverse","title":"R interface to EBI HoloFood resource","text":"miaverse R/Bioconductor framework specialized microbiome downstream data analysis, leveraging TreeSummarizedExperiment class. offers comprehensive suite tools microbiome bioinformatics. Additionally, miaverse includes tutorial book Orchestrating Microbiome Analysis (OMA), aims guide users conducting microbiome data analysis sharing best practices microbiome data science. miaverse website Orchestrating Microbiome Analysis (OMA)","code":""},{"path":[]},{"path":"/index.html","id":"bioc-release","dir":"","previous_headings":"Installation","what":"Bioc-release","title":"R interface to EBI HoloFood resource","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HoloFoodR\")"},{"path":"/index.html","id":"bioc-devel","dir":"","previous_headings":"Installation","what":"Bioc-devel","title":"R interface to EBI HoloFood resource","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # The following initializes usage of Bioc devel BiocManager::install(version=\"devel\")  BiocManager::install(\"HoloFoodR\")"},{"path":"/index.html","id":"github","dir":"","previous_headings":"Installation","what":"GitHub","title":"R interface to EBI HoloFood resource","text":"","code":"remotes::install_github(\"EBI-Metagenomics/HoloFoodR\")"},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"R interface to EBI HoloFood resource","text":"detailed instructions read associated function help, function reference page vignette (vignette(\"HoloFoodR\"))","code":"library(HoloFoodR)  # Search samples samples <- doQuery(\"samples\")  # Search animals animals <- doQuery(\"animal\")  # Fetch data on certain sample samples <- c(\"ACCESSION_ID\") sample_data <- getData(accession.type = \"samples\", accession = samples)  # Fetch data on genome catalogues genome_catalogues <- getData(type = \"genome-catalogues\")  # Fetch data on genomes in certain genome catalogue catalogues <- c(\"ACCESSION_ID\") genomes <- getData(     type = \"genomes\",     accession.type = \"genome-catalogues\",     accession = catalogues)  # Fetch data on untargeted metabolites metabolites <- getMetaboLights(study_id)  # Fetch data as MultiAssayExperiment samples <- c(\"ACCESSION_ID\") mae <- getResult(accession = samples)"},{"path":"/reference/HoloFoodR.html","id":null,"dir":"Reference","previous_headings":"","what":"HoloFoodR package — HoloFoodR","title":"HoloFoodR package — HoloFoodR","text":"HoloFoodR implements interface EBI HoloFood database. See vignette general introduction package, [HoloFood](https://www.holofood.eu/) general HoloFood information, [API documentation](https://docs.holofooddata.org/api.html) details JSONAPI implementation.","code":""},{"path":[]},{"path":"/reference/HoloFoodR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"HoloFoodR package — HoloFoodR","text":"Maintainer: Tuomas Borman tuomas.v.borman@utu.fi (ORCID) Authors: Artur Sannikov arsann@utu.fi (ORCID) Leo Lahti leo.lahti@iki.fi (ORCID)","code":""},{"path":"/reference/addMGnify.html","id":null,"dir":"Reference","previous_headings":"","what":"Add results from MGnifyR to HoloFoodR results — addMGnify","title":"Add results from MGnifyR to HoloFoodR results — addMGnify","text":"Add results MGnifyR HoloFoodR results","code":""},{"path":"/reference/addMGnify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add results from MGnifyR to HoloFoodR results — addMGnify","text":"","code":"addMGnify(x, y, ...)  # S4 method for class 'SummarizedExperiment,MultiAssayExperiment' addMGnify(   x,   y,   exp.name1 = \"metagenomic\",   exp.name2 = \"metagenomic_amplicon\",   replace = TRUE,   ... )  # S4 method for class 'SummarizedExperiment,SummarizedExperiment' addMGnify(x, y, ...)  # S4 method for class 'SummarizedExperiment,ANY' addMGnify(x, y, id.col1 = \"sample_biosample\", id.col2 = \"accession\", ...)"},{"path":"/reference/addMGnify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add results from MGnifyR to HoloFoodR results — addMGnify","text":"x SummarizedExperiment. Results MGnifyR::getResult(). y MultiAssayExperiment SummarizedExperiment data.frame-like table. Results HoloFoodR::getResult() sample metadata . ... optional arguments used currently. exp.name1 Character scalar. Specifies name experiment added y. (Default: \"metagenomic\") exp.name2 Character scalar. Specifies name experiment HoloFoodR results. experiment used match IDs MGnify data. (Default: \"metagenomic_amplicon\") replace Logical scalar. Whether replace template experiment. (Default: TRUE) id.col1 Character scalar. Specifies name column colData(x) includes HoloFood identifiers. (Default: \"sample_biosample\") id.col2 Character scalar. Specifies name column colData(y[[exp.name2]]) includes HoloFood identifiers. (Default: \"accession\")","code":""},{"path":"/reference/addMGnify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add results from MGnifyR to HoloFoodR results — addMGnify","text":"MultiAssayExperiment","code":""},{"path":"/reference/addMGnify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add results from MGnifyR to HoloFoodR results — addMGnify","text":"Metagenomic data found MGnify rather HoloFoodR, two databases use different sample identifiers. However, MGnify's sample metadata includes references identifiers used HoloFood database, making straightforward convert sample IDs alignment HoloFood data. Despite , HoloFood contains additional metadata available MGnify. Moreover, integrating data MultiAssayExperiment maintaining accurate sample system matches can challenging. function designed simplify tasks, enabling seamless integration MGnify data HoloFood data retrieval database. need input returned data MGnifyR::getResult() HoloFoodR::getResult() functions.","code":""},{"path":"/reference/addMGnify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add results from MGnifyR to HoloFoodR results — addMGnify","text":"","code":"if (FALSE) { # \\dontrun{ # Get data from HoloFood database mae <- HoloFoodR::getResult(     salmon_sample_ids,     use.cache = TRUE )  # Get data from MGnify database mg <- MgnifyClient(     useCache = TRUE,     cacheDir = \".MGnifyR_cache\" ) tse <- MGnifyR::getResult(     mg,     accession = mgnify_analyses_ids,     get.func = FALSE )  # Add MGnify data to HoloFood data mae <- addMGnify(tse, mae) } # }"},{"path":"/reference/doQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"Search HoloFood database animals, genome catalogues, samples, viral catalogues","code":""},{"path":"/reference/doQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"","code":"doQuery(type, flatten = TRUE, ...)"},{"path":"/reference/doQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"type Character scalar specifying type data query. Must one following options: \"animals\", \"genome-catalogues\", \"samples\" \"viral-catalogues\". flatten Logical scalar specifying whether flatten resulting data.frame. means columns multiple values separated multiple columns. (Default: TRUE) ... optional arguments: max.hits NULL integer scalar specifying   maximum number results fetch. NULL, results fetched.   (Default: NULL) spread.sample.types Logical scalar specifying whether   create spread sample types column animals data. animals data,   sample types column might multiple values might hard   explore. argument specifies whether create presence/absence table   sample types. (Default: TRUE) use.cache Logical scalar specifying whether   use cache. (Default: FALSE) cache.dir Character scalar specifying cache   directory. (Default: tempdir()) clear.cache Logical scalar specifying whether   remove clear cache (Default: FALSE)","code":""},{"path":"/reference/doQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"data.frame","code":""},{"path":"/reference/doQuery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"doQuery flexible query function can utilized search available animals, genome catalogues, samples, viral catalogues. Search results can filtered; example, animals can filtered based available samples. See [Api browser](https://www.holofooddata.org/api/docs) information filters. can find help customizing queries [](https://emg-docs.readthedocs.io/en/latest/api.html#customising-queries).","code":""},{"path":"/reference/doQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"","code":"# Find animals results. The maximum amount of results is 100. Use filter # so that only chicken is searched. res <- doQuery(\"animals\", max.hits = 100, system = \"chicken\") head(res) #>        accession  system                                   canonical_url #> 1 SAMEA112904733 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904733 #> 2 SAMEA112904734 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904734 #> 3 SAMEA112904735 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904735 #> 4 SAMEA112904736 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904736 #> 5 SAMEA112904737 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904737 #> 6 SAMEA112904738 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904738 #>   histological host_genomic inflammatory_markers metabolomic #> 1        FALSE         TRUE                FALSE       FALSE #> 2         TRUE         TRUE                 TRUE       FALSE #> 3         TRUE         TRUE                 TRUE       FALSE #> 4        FALSE         TRUE                FALSE       FALSE #> 5         TRUE         TRUE                 TRUE       FALSE #> 6        FALSE         TRUE                FALSE       FALSE #>   metabolomic_targeted metagenomic_assembly metatranscriptomic transcriptomic #> 1                FALSE                 TRUE              FALSE          FALSE #> 2                 TRUE                 TRUE               TRUE           TRUE #> 3                 TRUE                 TRUE              FALSE           TRUE #> 4                FALSE                 TRUE              FALSE          FALSE #> 5                 TRUE                 TRUE               TRUE           TRUE #> 6                 TRUE                 TRUE              FALSE          FALSE"},{"path":"/reference/getData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from HoloFood database — getData","title":"Get data from HoloFood database — getData","text":"Get data HoloFood database","code":""},{"path":"/reference/getData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from HoloFood database — getData","text":"","code":"getData(   type = NULL,   accession.type = NULL,   accession = NULL,   flatten = FALSE,   ... )"},{"path":"/reference/getData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from HoloFood database — getData","text":"type NULL character scalar specifying type data query. Must one following options: \"analysis-summaries\", \"animals\", \"genome-catalogues\", \"samples\", \"sample_metadata_markers\" \"viral-catalogues\". genome viral catalogues fetched accession ID, type can also \"genomes\" \"fragments\". (Default: NULL) accession.type NULL character scalar specifying type accession IDs. Must one following options: \"animals\", \"genome-catalogues\", \"samples\" \"viral-catalogues\". (Default: NULL) accession NULL character vector specifying accession IDs type accession.type. (Default: NULL) flatten Logical scalar specifying whether flatten resulting data.frame. means columns multiple values separated multiple columns. (Default: FALSE) ... optional arguments: max.hits NULL integer scalar specifying   maximum number results fetch. NULL, results fetched.   (Default: NULL) use.cache Logical scalar specifying whether   use cache (Default: FALSE) cache.dir Character scalar specifying cache   directory. (Default: tempdir()) clear.cache Logical scalar specifying whether   remove clear cache (Default: FALSE)","code":""},{"path":"/reference/getData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from HoloFood database — getData","text":"list data.frame","code":""},{"path":"/reference/getData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data from HoloFood database — getData","text":"getData, can fetch data database. Compared getResult, function flexible since can fetch kind data database. However, function returns data without wrangling list data.frame optimized format fetching data samples. Search results can filtered; example, animals can filtered based available samples. See [Api browser](https://www.holofooddata.org/api/docs) information filters. can find help customizing queries [](https://emg-docs.readthedocs.io/en/latest/api.html#customising-queries).","code":""},{"path":[]},{"path":"/reference/getData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from HoloFood database — getData","text":"","code":"# Find genome catalogues catalogues <- getData(type = \"genome-catalogues\") head(catalogues) #>                 id                   title #> 1  salmon-gut-v2-0  HoloFood Salmon Gut v2 #> 2 chicken-gut-v2-0 HoloFood Chicken Gut v2 #>                                         biome related_mag_catalogue_id  system #> 1  root:Host-associated:Fish:Digestive system  non-model-fish-gut-v2-0  salmon #> 2 root:Host-associated:Birds:Digestive system       chicken-gut-v1-0-1 chicken #>   analysis_summaries #> 1       c(\"HoloF.... #> 2       c(\"HoloF....  # Find genomes based on certain genome catalogue iD res <- getData(     type = \"genomes\", accession.type = \"genome-catalogues\",     accession = catalogues[1, \"id\"], max.hits = 100) # See the data. head(res) #>       accession cluster_representative #> 1 MGYG000307500          MGYG000307500 #> 2 MGYG000307501          MGYG000307501 #> 3 MGYG000307502          MGYG000307501 #> 4 MGYG000307503          MGYG000299622 #> 5 MGYG000307504          MGYG000299579 #> 6 MGYG000307505          MGYG000299579 #>                                                                                                                      taxonomy #> 1                                                    Bacteria > Firmicutes_A > Clostridia > Oscillospirales > Ruminococcaceae #> 2 Bacteria > Proteobacteria > Gammaproteobacteria > Pseudomonadales > Pseudomonadaceae > Pseudomonas > Pseudomonas aeruginosa #> 3 Bacteria > Proteobacteria > Gammaproteobacteria > Pseudomonadales > Pseudomonadaceae > Pseudomonas > Pseudomonas aeruginosa #> 4          Bacteria > Proteobacteria > Gammaproteobacteria > Enterobacterales > Aeromonadaceae > Aeromonas > Aeromonas sobria #> 5                                                       Bacteria > Firmicutes > Bacilli > Mycoplasmatales > Mycoplasmoidaceae #> 6                                                       Bacteria > Firmicutes > Bacilli > Mycoplasmatales > Mycoplasmoidaceae #>                                                representative_url metadata1 #> 1 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000307500       196 #> 2 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000307501       197 #> 3 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000307501       198 #> 4 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000299622       199 #> 5 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000299579       200 #> 6 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000299579       201 #>   metadata.Genome_type metadata.Length metadata.N_contigs metadata.N50 #> 1                  MAG         1319783                 19       153761 #> 2                  MAG         6676386                136        83355 #> 3                  MAG         4766025               4741         1104 #> 4                  MAG         2381842                367         8519 #> 5                  MAG          681326                 38        37281 #> 6                  MAG          627706                 26        43119 #>   metadata.GC_content metadata.Completeness metadata.Contamination #> 1                27.3                 85.79                    0.0 #> 2               66.27                 98.37                  0.192 #> 3               64.82                 68.36                  2.053 #> 4               59.04                 58.95                   0.09 #> 5               25.14                 96.02                  0.384 #> 6               25.04                 95.25                  0.384 #>   metadata.rRNA_5S metadata.rRNA_16S metadata.rRNA_23S metadata.tRNAs #> 1              0.0               0.0               0.0             18 #> 2              0.0               0.0               0.0             17 #> 3            93.28              36.2             99.04             15 #> 4             91.6               0.0               0.0             14 #> 5              0.0             99.74             99.59             19 #> 6              0.0             99.74             99.59             19 #>   metadata.Genome_accession metadata.Sample_accession metadata.Study_accession #> 1               ERZ15182294            SAMEA112246717                ERP136460 #> 2               ERZ15182298            SAMEA112246686                ERP136460 #> 3               ERZ15182309            SAMEA112246683                ERP136460 #> 4               ERZ15182314            SAMEA112246713                ERP136460 #> 5               ERZ15233654            SAMEA112264417                ERP125469 #> 6               ERZ15233655            SAMEA112264472                ERP125469 #>   metadata.Country metadata.Continent #> 1           Norway             Europe #> 2           Norway             Europe #> 3           Norway             Europe #> 4           Norway             Europe #> 5           Norway             Europe #> 6           Norway             Europe #>                                                                                                                                       metadata.FTP_download #> 1 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0003075/MGYG000307500/genomes1/MGYG000307500.gff.gz #> 2 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0003075/MGYG000307501/genomes1/MGYG000307501.gff.gz #> 3 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0003075/MGYG000307501/genomes1/MGYG000307502.gff.gz #> 4 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0002996/MGYG000299622/genomes1/MGYG000307503.gff.gz #> 5 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0002995/MGYG000299579/genomes1/MGYG000307504.gff.gz #> 6 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0002995/MGYG000299579/genomes1/MGYG000307505.gff.gz #>   metadata.Host_species annotations.cazy.GH annotations.cazy.PL #> 1           Salmo salar                   7                   0 #> 2           Salmo salar                  24                   0 #> 3           Salmo salar                  24                   0 #> 4           Salmo salar                  27                   0 #> 5           Salmo salar                   0                   0 #> 6           Salmo salar                   0                   0 #>   annotations.cazy.CE annotations.cazy.AA annotations.cazy.CB #> 1                   0                   0                   1 #> 2                   3                   1                   4 #> 3                   3                   1                   4 #> 4                   1                   1                   6 #> 5                   0                   0                   0 #> 6                   0                   0                   0 #>   annotations.cazy.GT annotations.cazy.CL #> 1                   7                   0 #> 2                  34                   0 #> 3                  34                   0 #> 4                  20                   0 #> 5                   2                   0 #> 6                   2                   0 # It includes for instance summary of the CAZy # (Carbohydrate-Active enZymes) annotations as a counts per category cazy <- res[ , grepl(\"annotations.cazy\", colnames(res)), drop = FALSE] head(cazy) #>   annotations.cazy.GH annotations.cazy.PL annotations.cazy.CE #> 1                   7                   0                   0 #> 2                  24                   0                   3 #> 3                  24                   0                   3 #> 4                  27                   0                   1 #> 5                   0                   0                   0 #> 6                   0                   0                   0 #>   annotations.cazy.AA annotations.cazy.CB annotations.cazy.GT #> 1                   0                   1                   7 #> 2                   1                   4                  34 #> 3                   1                   4                  34 #> 4                   1                   6                  20 #> 5                   0                   0                   2 #> 6                   0                   0                   2 #>   annotations.cazy.CL #> 1                   0 #> 2                   0 #> 3                   0 #> 4                   0 #> 5                   0 #> 6                   0 # Moreover, it includes a sample list. This sample list represents a  # collection of samples where the MAG was identified. Thr data has also the # completeness of MAG in a sample. head(res[ c(\"metadata.Sample_accession\", \"metadata.Completeness\")]) #>   metadata.Sample_accession metadata.Completeness #> 1            SAMEA112246717                 85.79 #> 2            SAMEA112246686                 98.37 #> 3            SAMEA112246683                 68.36 #> 4            SAMEA112246713                 58.95 #> 5            SAMEA112264417                 96.02 #> 6            SAMEA112264472                 95.25"},{"path":"/reference/getMetaboLights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metabolomic data from MetaboLights database — getMetaboLights","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"Get metabolomic data MetaboLights database","code":""},{"path":"/reference/getMetaboLights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"","code":"getMetaboLights(study.id, ...)  getMetaboLightsFile(study.id, file, ...)"},{"path":"/reference/getMetaboLights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"study.id character vector specifying study identifier data going fetched MetaboLights database. ... optional arguments: cache.dir Character scalar specifying directory   downloaded file stored. (Default: tempdir()) timeout Integer scalar specifying timeout   seconds loading file. (Default: 5*60) file character vector specifying files fetched.","code":""},{"path":"/reference/getMetaboLights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"list","code":""},{"path":"/reference/getMetaboLights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"HoloFood database primarily comprises targeted metabolomic data, omitting non-targeted metabolomic information. Nonetheless, features URLs linking studies within MetaboLights database. functionality enables users access non-targeted metabolomic data. getMetaboLights function returns structured list encompassing processed data data.frame format study metadata, assay metadata, assay. metadata includes file names spectra data. files can loaded getMetaboLightsFile. Alternatively, identified study files fetch, can refer [vignette](https://rformassspectrometry.github.io/MsIO/articles/MsIO.html#loading-data--metabolights) instructions loading data directly MsExperiment object, specifically designed metabolomics spectra data.","code":""},{"path":[]},{"path":"/reference/getMetaboLights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"","code":"# This example is not run, because the server fails to respond sometimes. if( FALSE ){     res <- getMetaboLights(\"MTBLS4381\")     file_paths <- getMetaLightsFile(         study.id = \"MTBLS4381\",         file = res[[\"assay_meta\"]][[\"Raw Spectral Data File\"]]         ) }"},{"path":"/reference/getResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data on samples from HoloFood database — getResult","title":"Get data on samples from HoloFood database — getResult","text":"Get data samples HoloFood database","code":""},{"path":"/reference/getResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data on samples from HoloFood database — getResult","text":"","code":"getResult(accession, ...)"},{"path":"/reference/getResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data on samples from HoloFood database — getResult","text":"accession Character vector specifying accession IDs type samples. ... optional arguments: use.cache Logical scalar specifying whether   use cache. Note get.metabolomic = TRUE specified,   file MetaboLights stored local system location   specified cache.dir despite value use.cache.   (Default: FALSE) cache.dir Character scalar specifying cache   directory. (Default: tempdir()) clear.cache Logical scalar specifying whether   use.cache (Default: FALSE) assay.type Character scalar specifying name   assay resulting TreeSummarizedExperiment object.   (Default: \"counts\") get.metabolomic Logical scalar specifying whether   retrieve processed metabolomic data MetaboLights database.   retrieving spectra data, refer   getMetaboLights documentation.   (Default: FALSE)","code":""},{"path":"/reference/getResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data on samples from HoloFood database — getResult","text":"MultiAssayExperiment","code":""},{"path":"/reference/getResult.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data on samples from HoloFood database — getResult","text":"getResult, can fetch data samples HoloFood database. Compared getData, function convenient fetching samples data converts data MultiAssayExperiment different omics stored TreeSummarizedExperiment objects optimized downstream analytics. Columns returned MultiAssayExperiment individual animals. columns linked individual samples stored TreeSummarizedExperiment objects. HoloFood database lacks non-targeted metabolomic data can fetched MetaboLights resource. Certain datasets include processed features. datasets can retrieved function getResult integrates metabolomic data datasets HoloFood. Furthermore, HoloFoodR database include metagenomic assembly data, users can access data MGnify database. MGnifyR package provides convenient interface accessing database. employing MGnifyR::getResult(), users can obtain data formatted MultiAssayExperiment object, containing multiple TreeSummarizedExperiment objects. Consequently, data HoloFood MGnify databases inherently compatible subsequent downstream analysis.","code":""},{"path":[]},{"path":"/reference/getResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data on samples from HoloFood database — getResult","text":"","code":"# Find samples on certain animal samples <- doQuery(\"samples\", animal_accession = \"SAMEA112904746\")  # Get the data mae <- getResult(samples[[\"accession\"]]) #> Warning: Data for the following samples cannot be found. The sample types are metagenomic_assembly, host_genomic, transcriptomic and metatranscriptomic. (Note that metagenomic assemblies can be found from the MGnify database. See MGnifyR package.): #> 'SAMEA10130039', 'SAMEA13389496', 'SAMEA13389497', 'SAMEA13901618', 'SAMEA13901619', 'SAMEA13929785', 'SAMEA7571815' mae #> A MultiAssayExperiment object of 8 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 8: #>  [1] BIOGENIC AMINES: TreeSummarizedExperiment with 7 rows and 2 columns #>  [2] FATTY ACIDS: TreeSummarizedExperiment with 19 rows and 2 columns #>  [3] HISTOLOGY: TreeSummarizedExperiment with 20 rows and 2 columns #>  [4] INFLAMMATORY MARKERS: TreeSummarizedExperiment with 14 rows and 2 columns #>  [5] metagenomic_assembly: TreeSummarizedExperiment with 0 rows and 2 columns #>  [6] host_genomic: TreeSummarizedExperiment with 0 rows and 2 columns #>  [7] transcriptomic: TreeSummarizedExperiment with 0 rows and 2 columns #>  [8] metatranscriptomic: TreeSummarizedExperiment with 0 rows and 1 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files"}]
